"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execConfiguration = exports.deleteConfiguration = exports.saveConfiguration = exports.getConfiguration = exports.getConfigurations = exports.configurationPath = void 0;
const exit_hook_1 = __importDefault(require("exit-hook"));
const lodash_1 = require("lodash");
const pods_1 = require("../kubectl/pods");
const array_1 = require("../util/array");
const string_1 = require("../util/string");
const store_1 = require("./store");
const storeKey = 'configurations';
const searchKey = 'configurationName';
const excludeProperties = ['googleCloudProject', 'confirmation'];
exports.configurationPath = store_1.store.path;
const getConfigurations = () => store_1.store.get(storeKey);
exports.getConfigurations = getConfigurations;
const getConfiguration = (name) => {
    const configurations = (0, exports.getConfigurations)();
    return (0, array_1.findByKey)(configurations, searchKey, name);
};
exports.getConfiguration = getConfiguration;
const saveConfiguration = (answers) => {
    const configuration = (0, lodash_1.omit)(answers, excludeProperties);
    const configurations = store_1.store.get(storeKey);
    (0, array_1.appendOrReplaceByKey)(configurations, configuration, searchKey);
    store_1.store.set(storeKey, configurations);
};
exports.saveConfiguration = saveConfiguration;
const deleteConfiguration = (configuratioName) => {
    const configurations = store_1.store.get(storeKey);
    (0, array_1.deleteByKey)(configurations, searchKey, configuratioName);
    store_1.store.set(storeKey, configurations);
};
exports.deleteConfiguration = deleteConfiguration;
const execConfiguration = (configuration) => {
    const pod = {
        name: `sql-proxy-${(0, lodash_1.kebabCase)(configuration.configurationName)}-${(0, string_1.randomString)()}`,
        context: configuration.kubernetesContext,
        namespace: configuration.kubernetesNamespace,
        serviceAccount: configuration.kubernetesServiceAccount,
        instance: configuration.googleCloudSqlInstance.connectionName,
        localPort: configuration.localPort,
        remotePort: configuration.googleCloudSqlInstance.port,
    };
    (0, exit_hook_1.default)(() => {
        (0, pods_1.deletePod)(pod);
    });
    (0, pods_1.runCloudSqlProxyPod)(pod);
    (0, pods_1.waitForPodReady)(pod);
    (0, pods_1.portForward)(pod);
};
exports.execConfiguration = execConfiguration;

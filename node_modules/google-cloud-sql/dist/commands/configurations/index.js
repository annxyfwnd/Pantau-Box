"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addConfigurationsCommands = void 0;
const commander_1 = require("commander");
const error_1 = require("../../lib/util/error");
const create_1 = require("./create");
const path_1 = require("./path");
const remove_1 = require("./remove");
const run_1 = require("./run");
const show_1 = require("./show");
async function addConfigurationsCommands(program) {
    const configurations = new commander_1.Command('configurations');
    configurations.description('create and run SQL auth proxy configurations');
    configurations
        .command('create')
        .alias('edit')
        .description('create or edit Cloud SQL Auth Proxy configuration')
        .action(async () => {
        try {
            await (0, create_1.createConfiguration)();
        }
        catch (error) {
            (0, error_1.logError)(error);
        }
    });
    configurations
        .command('show')
        .description('show Cloud SQL Auth Proxy configuration')
        .action(async () => {
        try {
            await (0, show_1.showConfiguration)();
        }
        catch (error) {
            (0, error_1.logError)(error);
        }
    });
    configurations
        .command('remove')
        .alias('rm')
        .description('remove Cloud SQL Auth Proxy configuration')
        .action(async () => {
        try {
            await (0, remove_1.removeConfiguration)();
        }
        catch (error) {
            (0, error_1.logError)(error);
        }
    });
    configurations
        .command('run')
        .argument('[name]', 'configuration name, optional')
        .description('run Cloud SQL Auth Proxy configuration')
        .action(async (name) => {
        try {
            if (name) {
                (0, run_1.runConfigurationByName)(name);
            }
            else {
                await (0, run_1.runConfiguration)();
            }
        }
        catch (error) {
            (0, error_1.logError)(error);
        }
    });
    configurations
        .command('path')
        .description('show path to local configurations file')
        .action(() => {
        (0, path_1.showConfigurationPath)();
    });
    program.addCommand(configurations);
}
exports.addConfigurationsCommands = addConfigurationsCommands;
